<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>🎉 SMC Batch Day Anonymous Messages 🎉</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- SolaimanLipi Font -->
    <link href="https://fonts.googleapis.com/css2?family=SolaimanLipi&display=swap" rel="stylesheet">
    
    <!-- Custom CSS for Animations and Confetti -->
    <style>
        @keyframes confetti-fall {
            0% { transform: translateY(-100vh) rotate(0deg); opacity: 1; }
            100% { transform: translateY(100vh) rotate(720deg); opacity: 0; }
        }
        .confetti {
            position: fixed;
            width: 10px;
            height: 10px;
            background-color: #FFC0CB; /* Pink */
            opacity: 0;
            animation: confetti-fall 3s ease-out forwards;
            pointer-events: none;
            z-index: 9999;
            border-radius: 50%;
        }

        /* Tailwind CSS Custom Animations */
        @keyframes fade-in-down { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } } .animate-fade-in-down { animation: fade-in-down 0.5s ease-out forwards; }
        @keyframes fade-in { from { opacity: 0; } to { opacity: 1; } } .animate-fade-in { animation: fade-in 0.7s ease-out forwards; }
        @keyframes pulse-slow { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.02); } } .animate-pulse-slow { animation: pulse-slow 3s infinite ease-in-out; }
        @keyframes bounce-slow { 0%, 100% { transform: translateY(0); } 25% { transform: translateY(-5px); } 50% { transform: translateY(0); } 75% { transform: translateY(-2px); } } .animate-bounce-slow { animation: bounce-slow 4s infinite ease-in-out; }
        @keyframes pulse-once { 0% { transform: scale(1); } 50% { transform: scale(1.03); } 100% { transform: scale(1); } } .animate-pulse-once { animation: pulse-once 0.8s ease-out; }
        @keyframes bounce-sm { 0%, 100% { transform: translateY(0); } 50% { transform: translateY(-3px); } } .animate-bounce-sm { animation: bounce-sm 1s infinite ease-in-out; }
        @keyframes slide-in { from { opacity: 0; transform: translateX(-20px); } to { opacity: 1; transform: translateX(0); } } .animate-slide-in { animation: slide-in 0.6s ease-out forwards; }
    </style>
</head>
<body class="font-['SolaimanLipi']">
    <div id="app-root" class="min-h-screen bg-gradient-to-br from-purple-100 via-blue-100 to-green-100 text-gray-800 flex flex-col">
        <!-- Confetti container -->
        <div id="confetti-container"></div>

        <!-- Loading Indicator -->
        <div id="loading-indicator" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000] hidden">
            <div class="flex flex-col items-center text-white text-xl">
                <div class="animate-spin rounded-full h-12 w-12 border-b-4 border-white mb-4"></div>
                <p>Loading...</p>
            </div>
        </div>

        <!-- Notification Banner -->
        <div id="notification-banner" class="fixed top-0 left-0 right-0 p-4 text-center z-50 rounded-b-xl shadow-2xl animate-fade-in-down hidden">
            <p id="notification-message" class="font-semibold text-lg"></p>
            <button id="notification-close-btn" class="absolute top-2 right-3 text-white text-2xl font-bold opacity-75 hover:opacity-100 transition-opacity">
                &times;
            </button>
        </div>

        <!-- Header -->
        <header class="bg-gradient-to-r from-blue-700 via-purple-700 to-pink-700 text-white p-5 text-center shadow-xl rounded-b-3xl">
            <h1 class="text-3xl md:text-4xl font-extrabold tracking-wider drop-shadow-lg animate-pulse-slow">
                🎉 SMC Batch Day Anonymous Messages 🎉
            </h1>
            <div class="mt-4 text-xl md:text-2xl font-semibold text-yellow-300 drop-shadow-md animate-bounce-slow">
                Countdown: <span id="countdown-timer" class="font-mono text-white bg-blue-800 px-3 py-1 rounded-lg shadow-inner"></span>
            </div>
        </header>

        <!-- Navbar -->
        <nav class="bg-white shadow-xl p-4 flex justify-center space-x-6 rounded-b-3xl border-b-4 border-purple-300">
            <button id="nav-home-btn" class="px-8 py-3 rounded-full font-bold text-lg md:text-xl transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg">
                📝 Send Message
            </button>
            <button id="nav-login-btn" class="px-8 py-3 rounded-full font-bold text-lg md:text-xl transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg">
                🔐 Admin Login
            </button>
        </nav>

        <!-- Main Content Area -->
        <main class="flex-grow p-6 flex items-center justify-center">
            <div id="content-area" class="w-full max-w-md bg-white p-10 rounded-3xl shadow-3xl border-4 border-blue-400 transform hover:scale-[1.01] transition-transform duration-300 ease-out">
                <!-- Page content will be rendered here by JavaScript -->
            </div>
        </main>
    </div>

    <!-- Firebase SDKs and Main JavaScript Logic -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, query, onSnapshot, addDoc, deleteDoc, doc, serverTimestamp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Your web app's Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyDC2h_OcACG6KRilhiLvU0KQp2dF2Soayo",
            authDomain: "nglsmc-ea917.firebaseapp.com",
            projectId: "nglsmc-ea917",
            storageBucket: "nglsmc-ea917.firebasestorage.app",
            messagingSenderId: "792576788078",
            appId: "1:792576788078:web:b598be55cebcaaf053c87f",
            measurementId: "G-11LRE9LVHT"
        };

        const appId = firebaseConfig.projectId; // Consistent appId for Firestore path

        // Initialize Firebase
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Hardcoded admin login credentials
        const ADMIN_USERNAME = 'smcbatch';
        const ADMIN_PASSWORD = 'smcbatchpass';

        // Global state variables
        let currentPage = 'home';
        let nickname = '';
        let message = '';
        let username = '';
        let password = '';
        let isAdminLoggedIn = false;
        let messages = [];
        let countdown = '';
        let showConfetti = false;
        let notification = { message: '', type: '' };
        let isLoading = false;

        // --- DOM Elements ---
        const appRoot = document.getElementById('app-root');
        const contentArea = document.getElementById('content-area');
        const countdownTimerEl = document.getElementById('countdown-timer');
        const loadingIndicatorEl = document.getElementById('loading-indicator');
        const notificationBannerEl = document.getElementById('notification-banner');
        const notificationMessageEl = document.getElementById('notification-message');
        const notificationCloseBtn = document.getElementById('notification-close-btn');
        const confettiContainer = document.getElementById('confetti-container');

        // --- State Update Functions (mimicking React's setState) ---
        function updateState(newState) {
            Object.assign(window, newState); // Update global variables
            renderAppContent(); // Re-render relevant parts of the UI
        }

        function setPage(page) {
            currentPage = page;
            renderAppContent();
            updateNavButtons(); // Update nav button styles
        }

        function setNicknameValue(value) { nickname = value; }
        function setMessageValue(value) { message = value; }
        function setUsernameValue(value) { username = value; }
        function setPasswordValue(value) { password = value; }

        function setIsAdminLoggedInValue(value) {
            isAdminLoggedIn = value;
            updateNavButtons(); // Update nav button styles
            if (value) {
                fetchMessages(); // Fetch messages immediately after admin login
            } else {
                messages = []; // Clear messages on logout
            }
        }

        function setMessagesValue(newMessages) {
            messages = newMessages;
            renderAdminInboxPage(); // Only re-render inbox if it's the current page
        }

        function setCountdownValue(value) {
            countdown = value;
            if (countdownTimerEl) {
                countdownTimerEl.textContent = value;
            }
        }

        function setShowConfettiValue(value) {
            showConfetti = value;
            renderConfetti(); // Update confetti display
        }

        function setNotificationValue(msg, type) {
            notification = { message: msg, type: type };
            if (notification.message) {
                notificationBannerEl.classList.remove('hidden');
                notificationMessageEl.textContent = notification.message;
                notificationBannerEl.className = `fixed top-0 left-0 right-0 p-4 text-center z-50 rounded-b-xl shadow-2xl animate-fade-in-down ${notification.type === 'success' ? 'bg-gradient-to-r from-green-500 to-green-700 text-white' : 'bg-gradient-to-r from-red-500 to-red-700 text-white'}`;
                setTimeout(() => {
                    notificationBannerEl.classList.add('hidden');
                    notification.message = ''; // Clear message after hiding
                }, 5000);
            } else {
                notificationBannerEl.classList.add('hidden');
            }
        }

        function setIsLoadingValue(value) {
            isLoading = value;
            if (loadingIndicatorEl) {
                if (isLoading) {
                    loadingIndicatorEl.classList.remove('hidden');
                } else {
                    loadingIndicatorEl.classList.add('hidden');
                }
            }
            // Disable/enable buttons based on loading state
            const buttons = document.querySelectorAll('button[type="submit"]');
            buttons.forEach(btn => {
                btn.disabled = isLoading;
                if (btn.id === 'message-submit-btn') {
                    btn.textContent = isLoading ? 'Sending Message...' : 'Drop Message! ✨';
                } else if (btn.id === 'login-submit-btn') {
                    btn.textContent = isLoading ? 'Logging In...' : 'Login 🔑';
                }
            });
            document.querySelectorAll('.delete-message-btn').forEach(btn => btn.disabled = isLoading);
        }

        // --- Core Logic ---

        // Firebase Auth State Listener
        onAuthStateChanged(auth, (user) => {
            if (!user) {
                signInAnonymously(auth).catch(error => {
                    console.error("Error signing in anonymously:", error);
                    setNotificationValue(`Authentication error: ${error.message}`, 'error');
                });
            }
        });

        // Countdown Timer Logic
        let countdownInterval;
        function startCountdown() {
            const batchDay = new Date('2025-07-17T00:00:00'); // July 17, 2025
            countdownInterval = setInterval(() => {
                const now = new Date().getTime();
                const distance = batchDay.getTime() - now;

                if (distance < 0) {
                    clearInterval(countdownInterval);
                    setCountdownValue('🎉 Batch Day is Here! 🎉');
                    return;
                }

                const days = Math.floor(distance / (1000 * 60 * 60 * 24));
                const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
                const seconds = Math.floor((distance % (1000 * 60)) / 1000);

                setCountdownValue(`${days}d ${hours}h ${minutes}m ${seconds}s`);
            }, 1000);
        }

        // Fetch all messages for admin (real-time updates)
        let unsubscribeMessages = null;
        function fetchMessages() {
            if (!isAdminLoggedIn) {
                if (unsubscribeMessages) {
                    unsubscribeMessages(); // Unsubscribe if no longer admin
                    unsubscribeMessages = null;
                }
                return;
            }

            const messagesCollectionRef = collection(db, `artifacts/${appId}/public/data/messages`);
            const q = query(messagesCollectionRef);

            if (unsubscribeMessages) {
                unsubscribeMessages(); // Unsubscribe from previous listener if exists
            }

            unsubscribeMessages = onSnapshot(q, (snapshot) => {
                const fetchedMessages = snapshot.docs.map(doc => ({
                    id: doc.id,
                    ...doc.data()
                }));
                fetchedMessages.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));
                setMessagesValue(fetchedMessages); // This will trigger renderAdminInboxPage
            }, (error) => {
                console.error("Error fetching messages for admin:", error);
                setNotificationValue(`Failed to load messages: ${error.message}`, 'error');
            });
        }

        // Handle Message Submission
        async function handleSendMessage(e) {
            e.preventDefault();
            setIsLoadingValue(true);

            const finalNickname = nickname.trim() === '' ? 'Anonymous' : nickname.trim();
            const finalMessage = message.trim() === '' ? 'No message provided' : message.trim();

            if (finalMessage === 'No message provided' && finalNickname === 'Anonymous') {
                setNotificationValue('Either a nickname or a message must be provided.', 'error');
                setIsLoadingValue(false);
                return;
            }

            try {
                if (!auth.currentUser) {
                    setNotificationValue('System is preparing, please wait a few seconds and try again.', 'error');
                    await signInAnonymously(auth);
                    setIsLoadingValue(false);
                    return;
                }

                await addDoc(collection(db, `artifacts/${appId}/public/data/messages`), {
                    nickname: finalNickname,
                    message: finalMessage,
                    timestamp: serverTimestamp(),
                });
                setNotificationValue('Message sent successfully! 🎉', 'success');
                setNicknameValue('');
                setMessageValue('');
                triggerConfetti();
            } catch (error) {
                console.error("Error sending message:", error);
                let errorMessage = 'Failed to send message.';
                if (error.code === 'permission-denied') {
                    errorMessage += ' (Check Firebase Security Rules.) ';
                } else {
                    errorMessage += ` (${error.message})`;
                }
                setNotificationValue(errorMessage, 'error');
            } finally {
                setIsLoadingValue(false);
            }
        }

        // Handle Admin Login
        async function handleLogin(e) {
            e.preventDefault();
            setIsLoadingValue(true);
            if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {
                setIsAdminLoggedInValue(true);
                setPage('adminInbox');
                setNotificationValue('Logged in successfully! 🔐', 'success');
            } else {
                setNotificationValue('Invalid username or password.', 'error');
            }
            setIsLoadingValue(false);
        }

        // Handle Message Deletion (Admin only)
        async function handleDeleteMessage(messageId) {
            if (!isAdminLoggedIn) {
                setNotificationValue('You do not have permission to perform this action.', 'error');
                return;
            }

            const confirmDelete = window.confirm("Are you sure you want to delete this message?");
            if (confirmDelete) {
                setIsLoadingValue(true);
                try {
                    await deleteDoc(doc(db, `artifacts/${appId}/public/data/messages`, messageId));
                    setNotificationValue('Message deleted successfully.🗑️', 'success');
                } catch (error) {
                    console.error("Error deleting message:", error);
                    setNotificationValue(`Failed to delete message: ${error.message}`, 'error');
                } finally {
                    setIsLoadingValue(false);
                }
            }
        }

        // Confetti Animation Logic
        function triggerConfetti() {
            setShowConfettiValue(true);
            setTimeout(() => setShowConfettiValue(false), 3000);
        }

        function renderConfetti() {
            if (!showConfetti) {
                confettiContainer.innerHTML = '';
                return;
            }
            const confettiCount = 50;
            let confettiElements = '';
            for (let i = 0; i < confettiCount; i++) {
                const style = `left: ${Math.random() * 100}vw; animation-delay: ${Math.random() * 2}s; background-color: hsl(${Math.random() * 360}, 100%, 75%); transform: rotate(${Math.random() * 360}deg);`;
                confettiElements += `<div class="confetti" style="${style}"></div>`;
            }
            confettiContainer.innerHTML = confettiElements;
        }

        // --- UI Rendering Functions ---

        function updateNavButtons() {
            const homeBtn = document.getElementById('nav-home-btn');
            const loginBtn = document.getElementById('nav-login-btn');

            homeBtn.className = `px-8 py-3 rounded-full font-bold text-lg md:text-xl transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg ${currentPage === 'home' ? 'bg-gradient-to-r from-blue-500 to-blue-700 text-white ring-4 ring-blue-300' : 'bg-blue-100 text-blue-700 hover:bg-blue-200'}`;
            loginBtn.className = `px-8 py-3 rounded-full font-bold text-lg md:text-xl transition-all duration-300 ease-in-out transform hover:scale-105 shadow-lg ${currentPage === 'login' || currentPage === 'adminInbox' ? 'bg-gradient-to-r from-purple-500 to-purple-700 text-white ring-4 ring-purple-300' : 'bg-purple-100 text-purple-700 hover:bg-purple-200'}`;
        }

        function renderHomePage() {
            contentArea.innerHTML = `
                <section>
                    <h2 class="text-3xl md:text-4xl font-extrabold text-center text-blue-800 mb-8 animate-fade-in">
                        Drop an Anonymous Message
                    </h2>
                    <form id="message-form" class="space-y-6">
                        <div>
                            <label for="nickname" class="block text-base font-medium text-gray-700 mb-2">Your Nickname (Optional)</label>
                            <input
                                type="text"
                                id="nickname"
                                value="${nickname}"
                                class="w-full p-4 border-2 border-blue-300 rounded-xl focus:ring-blue-500 focus:border-blue-500 shadow-inner text-lg placeholder-gray-400 transition-all duration-200"
                                placeholder="e.g., A Secret Admirer"
                            />
                        </div>
                        <div>
                            <label for="message" class="block text-base font-medium text-gray-700 mb-2">Your Anonymous Message (Optional)</label>
                            <textarea
                                id="message"
                                value="${message}"
                                rows="7"
                                class="w-full p-4 border-2 border-blue-300 rounded-xl focus:ring-blue-500 focus:border-blue-500 shadow-inner resize-y text-lg placeholder-gray-400 transition-all duration-200"
                                placeholder="Type your heartfelt message here..."
                            ></textarea>
                        </div>
                        <button
                            type="submit"
                            id="message-submit-btn"
                            class="w-full bg-gradient-to-r from-green-500 to-teal-600 text-white py-4 rounded-full font-extrabold text-xl md:text-2xl hover:from-green-600 hover:to-teal-700 transition-all duration-300 ease-in-out shadow-lg transform hover:scale-105 active:scale-95 animate-pulse-once"
                            ${isLoading ? 'disabled' : ''}
                        >
                            ${isLoading ? 'Sending Message...' : 'Drop Message! ✨'}
                        </button>
                        <p class="text-center text-gray-600 text-sm mt-4">
                            Special thanks to <strong>Al Shariear Khan Peal</strong>. <br/>
                            Follow <a href="https://www.facebook.com/MesonTalks" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline font-semibold">Meson Talks</a>
                        </p>
                    </form>
                </section>
            `;
            attachHomePageEventListeners();
        }

        function renderLoginPage() {
            contentArea.innerHTML = `
                <section>
                    <h2 class="text-3xl md:text-4xl font-extrabold text-center text-purple-800 mb-8 animate-fade-in">
                        Admin Login
                    </h2>
                    <form id="login-form" class="space-y-6">
                        <div>
                            <label for="username" class="block text-base font-medium text-gray-700 mb-2">Username</label>
                            <input
                                type="text"
                                id="username"
                                value="${username}"
                                class="w-full p-4 border-2 border-purple-300 rounded-xl focus:ring-purple-500 focus:border-purple-500 shadow-inner text-lg placeholder-gray-400 transition-all duration-200"
                                placeholder="e.g., smcbatch"
                                required
                            />
                        </div>
                        <div>
                            <label for="password" class="block text-base font-medium text-gray-700 mb-2">Password</label>
                            <input
                                type="password"
                                id="password"
                                value="${password}"
                                class="w-full p-4 border-2 border-purple-300 rounded-xl focus:ring-purple-500 focus:border-purple-500 shadow-inner text-lg placeholder-gray-400 transition-all duration-200"
                                placeholder="********"
                                required
                            />
                        </div>
                        <button
                            type="submit"
                            id="login-submit-btn"
                            class="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-4 rounded-full font-extrabold text-xl md:text-2xl hover:from-purple-700 hover:to-pink-700 transition-all duration-300 ease-in-out shadow-lg transform hover:scale-105 active:scale-95"
                            ${isLoading ? 'disabled' : ''}
                        >
                            ${isLoading ? 'Logging In...' : 'Login 🔑'}
                        </button>
                    </form>
                </section>
            `;
            attachLoginPageEventListeners();
        }

        function renderAdminInboxPage() {
            const messageListHtml = messages.length === 0 ? `
                <p class="text-center text-gray-500 italic text-lg p-6 bg-gray-50 rounded-xl shadow-sm border border-gray-200 animate-fade-in">
                    No messages yet.
                </p>
            ` : `
                <ul class="space-y-5 mt-6">
                    ${messages.map(msg => `
                        <li class="bg-white p-6 rounded-2xl shadow-lg border-2 border-blue-200 relative transform hover:scale-[1.01] transition-transform duration-200 ease-out animate-slide-in">
                            <p class="text-sm text-gray-600 mb-2">
                                From: <span class="font-bold text-blue-700">${msg.nickname}</span>
                            </p>
                            <p class="text-gray-800 text-lg mb-3 leading-relaxed border-l-4 border-blue-400 pl-3 py-1 bg-blue-50 rounded-md">${msg.message}</p>
                            <p class="text-xs text-gray-500 text-right">
                                ${msg.timestamp ? new Date(msg.timestamp.toDate()).toLocaleString() : 'Just now'}
                            </p>
                            <button
                                data-message-id="${msg.id}"
                                class="delete-message-btn absolute top-3 right-3 p-2 text-red-600 hover:text-red-800 transition-colors rounded-full bg-red-100 bg-opacity-80 hover:bg-opacity-100 shadow-md transform hover:scale-110 active:scale-90"
                                title="Delete Message"
                                ${isLoading ? 'disabled' : ''}
                            >
                                <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>
                            </button>
                        </li>
                    `).join('')}
                </ul>
            `;
            contentArea.innerHTML = `
                <section>
                    <h2 class="text-3xl md:text-4xl font-extrabold text-center text-blue-800 mb-6 animate-fade-in">
                        All Messages 📬
                    </h2>
                    <div class="flex justify-between items-center mb-6 p-4 bg-blue-50 rounded-xl shadow-inner border border-blue-200">
                        <span class="text-lg md:text-xl font-medium text-gray-700">
                            Total Messages: <span class="bg-blue-600 text-white px-4 py-2 rounded-full text-base font-bold shadow-md animate-bounce-sm">${messages.length}</span>
                        </span>
                    </div>
                    ${messageListHtml}
                </section>
            `;
            attachAdminInboxEventListeners();
        }

        // Main render function to decide which page to show
        function renderAppContent() {
            if (currentPage === 'home') {
                renderHomePage();
            } else if (currentPage === 'login') {
                renderLoginPage();
            } else if (currentPage === 'adminInbox' && isAdminLoggedIn) {
                renderAdminInboxPage();
            } else {
                // Default to login if trying to access adminInbox without login
                setPage('login');
            }
            // Ensure loading and notification states are reflected
            setIsLoadingValue(isLoading);
            setNotificationValue(notification.message, notification.type);
            updateNavButtons();
        }

        // --- Event Listener Attachment Functions ---
        function attachGlobalEventListeners() {
            document.getElementById('nav-home-btn').addEventListener('click', () => setPage('home'));
            document.getElementById('nav-login-btn').addEventListener('click', () => setPage('login'));
            notificationCloseBtn.addEventListener('click', () => setNotificationValue('', ''));
        }

        function attachHomePageEventListeners() {
            const messageForm = document.getElementById('message-form');
            if (messageForm) {
                messageForm.addEventListener('submit', handleSendMessage);
                document.getElementById('nickname').addEventListener('input', (e) => setNicknameValue(e.target.value));
                document.getElementById('message').addEventListener('input', (e) => setMessageValue(e.target.value));
            }
        }

        function attachLoginPageEventListeners() {
            const loginForm = document.getElementById('login-form');
            if (loginForm) {
                loginForm.addEventListener('submit', handleLogin);
                document.getElementById('username').addEventListener('input', (e) => setUsernameValue(e.target.value));
                document.getElementById('password').addEventListener('input', (e) => setPasswordValue(e.target.value));
            }
        }

        function attachAdminInboxEventListeners() {
            if (isAdminLoggedIn) {
                document.querySelectorAll('.delete-message-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const messageId = button.dataset.messageId;
                        handleDeleteMessage(messageId);
                    });
                });
            }
        }

        // --- Initial Setup on Window Load ---
        window.addEventListener('load', () => {
            startCountdown();
            attachGlobalEventListeners(); // Attach global listeners once
            renderAppContent(); // Initial render of the app content
        });

    </script>
</body>
</html>
